name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: your_database_name
          POSTGRES_USER: your_database_user
          POSTGRES_PASSWORD: your_database_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest flask flask_migrate psycopg2-binary
        if [ -f requirements/base.txt ]; then pip install -r requirements/base.txt; fi
        pip freeze > requirements/base.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Initialize database migrations
      run: |
        flask db init
    - name: Create initial migration
      run: |
        flask db migrate -m "Initial migration."
    - name: Upgrade database
      run: |
        flask db upgrade
    - name: Generate training data
      run: flask create_workouts
    - name: Create test user
      run: flask create_users
    - name: Run tests
      run: |
        pytest
      continue-on-error: true  # Continue even if this step fails

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: List files in the repository
      run: |
        ls -la
    - name: Check if requirements/base.txt exists
      run: |
        if [ ! -f requirements/base.txt ]; then
          echo "requirements/base.txt not found! Creating a default requirements file..."
          mkdir -p requirements
          echo "flask" > requirements/base.txt
          echo "flask_migrate" >> requirements/base.txt
          echo "psycopg2-binary" >> requirements/base.txt
        else
          echo "requirements/base.txt already exists."
        fi
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build Docker image
      run: |
        docker build -t your_repo_name:latest .

  docker-run:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Run Docker container
      run: |
        docker run -d -p 5000:5000 your_repo_name:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-run
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    - name: Push Docker image
      run: |
        docker tag your_repo_name:latest your_dockerhub_username/your_repo_name:latest
        docker push your_dockerhub_username/your_repo_name:latest
    - name: Deploy to Cloud Service
      run: |
        # Add commands to deploy the Docker image to your chosen cloud service
        echo "Deploying to cloud service..."
